{"version":3,"sources":["assets/NAT_counties.csv","assets/NAT_states.csv","assets/NAT.geojson","assets/US_states.geojson","feature/Feature.js","time/Time.js","map/helper.js","map/Choropleth.js","parallel-coordinates/ParallelCoordinates.js","parallel-coordinates/helper.js","App.js","tooltip.js","reportWebVitals.js","index.js"],"names":["module","exports","__webpack_require__","p","Feature","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_this","features","featureList","react_default","a","createElement","id","style","height","overflow","padding","border","index_es","dataLength","length","scrollableTarget","list","dataSource","renderItem","item","Item","key","accessKey","onClick","onSelectFeature","background","currentFeature","Meta","title","feature","React","Component","Time","marks","timeline","reduce","marksDict","year","slider","step","defaultValue","min","max","onChange","onSelectTime","trackStyle","backgroundColor","getColorScale","featureExtrema","nColors","d3","domain","range","hideMap","mapID","getTooltipText","region","value","concat","Choropleth","toggleMapType","setState","map","increaseZoomScale","zoomTransition","decreaseZoomScale","state","property","currentYear","showState","x","y","zoomScale","stateGeojson","countyGeojson","canvasRef","createRef","ZOOM_SCALE_THRESHOLD","STATE_MAP_ID","COUNTY_MAP_ID","STATE_COLORS","COUNTY_COLORS","zoom","svg","zoomLevel","transition","delay","duration","scaleBy","_this2","_this$canvasRef$curre","current","scrollWidth","scrollHeight","projection","scale","translate","path","years","dataGeojson","propertyArray","forEach","d","properties","getExtrema","stateColorScale","countyColorScale","remove","select","drawStates","drawCounties","drawStateLegend","drawCountyLegend","console","log","scaleExtent","on","event","transform","selectAll","attr","k","updateZoomedView","colorScale","legend","d3legend","legendColor","shapeWidth","orient","append","_this3","data","enter","onSelectRegion","STATE_NAME","tooltip","html","pageX","pageY","_this4","NAME","_this5","_this6","Promise","all","then","drawMap","catch","err","prevProps","prevState","row","gutter","col","span","segmented","options","es_button","width","ref","ParallelCoordinates","margin","rootGroup","keys","filter","slice","yScales","bottom","top","scales","Number","getYScales","xScale","join","yScale","each","ticks","text","stateCSV","drawParallelCoordinates","App","selectTime","countyDataset","stateDataset","county","selectFeature","bind","assertThisInitialized","selectRegion","e","preventDefault","currentTarget","natCounties","natStates","fetchData","className","layout","card","src_feature_Feature","src_time_Time","map_Choropleth","statesGeojson","natGeojson","parallel_coordinates_ParallelCoordinates","reportWebVitals","onPerfEntry","Function","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","src_App_0"],"mappings":"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","file":"static/js/main.a9fabfd8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/NAT_counties.c46752c1.csv\";","module.exports = __webpack_public_path__ + \"static/media/NAT_states.e22e9ae7.csv\";","module.exports = __webpack_public_path__ + \"static/media/NAT.6db895be.geojson\";","module.exports = __webpack_public_path__ + \"static/media/US_states.2aa3311d.geojson\";","import { Avatar, Divider, List, Skeleton } from 'antd';\nimport { useEffect, useState } from 'react';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport React from 'react';\nimport './Feature.css';\nimport { reduce, schemeBlues, tickStep } from 'd3';\nimport { isContentEditable } from '@testing-library/user-event/dist/utils';\n\n\nclass Feature extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  \n  render() {\n    const features = this.props.featureList;\n\n    return (\n      <div>\n        <h3>Features</h3>\n        <div\n          id=\"scrollableDiv\"\n          style={{\n            height: 400,\n            overflow: 'auto',\n            padding: '0 16px',\n            border: '1px solid rgba(140, 140, 140, 0.35)',\n          }}\n        >\n        <InfiniteScroll\n          dataLength={features.length}\n          scrollableTarget=\"scrollableDiv\"\n        >\n          <List\n            dataSource={features}\n            renderItem={(item) => (\n              <List.Item\n                key={item.key}\n                accessKey={item.key}\n                onClick={this.props.onSelectFeature}\n                style={{background: this.props.currentFeature===item.key ? '#7b88b8' : 'white'}}\n              >\n                <List.Item.Meta title={item.feature} />\n                <div>[Statistical Measures]</div>\n              </List.Item>\n            )}\n          />\n        </InfiniteScroll>\n      </div>\n    </div>\n    );\n  }\n}\n\nexport default Feature;","import { Slider } from 'antd';\nimport React from 'react';\nimport './Time.css'\n\nclass Time extends React.Component {\n  constructor(props) {\n    super(props)\n    this.marks = this.props.timeline.reduce((marksDict, year) => {\n      marksDict[year] = '19' + year;\n      return marksDict;\n  }, {});\n  }\n  \n  render() {\n    return (\n      <div id=\"timeline\">\n        <Slider marks={this.marks} step={null}\n          defaultValue={60} min={60} max={90}\n          onChange={this.props.onSelectTime}\n          trackStyle={{backgroundColor: '#f5f5f5'}}\n        />\n      </div>\n    )\n  }\n};\n\nexport default Time;","import * as d3 from 'd3';\n\n/**\n * Return the color scale for the selected feature\n * \n * @param {number[]} featureExtrema The extrema for the selected feature over the 4 decades\n * @param {number} nColors The number of colors for the color scale\n * @returns {function} The color scale\n */\nexport function getColorScale(featureExtrema, nColors) {\n  \n  return d3.scaleQuantile()\n    .domain(d3.extent(featureExtrema))\n    .range(d3.schemeGnBu[nColors]);\n}\n\n/**\n * Return a list of extrema for the selected feature over the 4 decades\n * \n * @param {string} feature The selected feature\n * @param {number[]} years The array of years [60, 70, 80, 90]\n * @param {Object[]} dataGeojson The geojson data for all counties\n * @returns {number[]} The extrema for the selected feature\n */\nexport function getExtrema(feature, years, dataGeojson) {\n\n  // propertyArray is ['HR60', 'HR70', 'HR80, 'HR90'] for input feature HR (homicide rate)\n  const propertyArray = years.map(year => feature + year);\n\n  // iterate through the propertyArray to find the extrema\n  let featureExtrema = [];\n  propertyArray.forEach(property => {\n    const features = dataGeojson.map(d => d.properties[property]);\n    featureExtrema = d3.extent(featureExtrema.concat(features));\n  });\n\n  return featureExtrema;\n}\n\n\nexport function showMap(mapID) {\n  d3.selectAll(mapID)\n    .style('visibility', 'visible');\n}\n\nexport function hideMap(mapID) {\n  d3.selectAll(mapID)\n    .style('visibility', 'hidden');\n}\n\nexport function hideStateLegend(stateLegend) {\n  stateLegend.style('visibility', 'hidden');\n}\n\nexport function showStateLegend(stateLegend) {\n  stateLegend.style('visibility', 'visible');\n}\n\nexport function getTooltipText(region, feature, value, year) {\n  const html =\n  `<div>\n    <p>${region}</p>\n    <p><b>${feature}: </b>${value}<p>\n    <p><b>Year: </b>${year}</p>\n  </div>`\n  return html;\n}","import React from 'react';\nimport * as d3 from 'd3';\nimport { getColorScale, getExtrema, showMap, hideMap, getTooltipText, showStateLegend, hideStateLegend } from './helper';\nimport { Segmented, Row, Col, Button } from 'antd';\nimport d3legend from 'd3-svg-legend';\nimport { toHaveDescription } from '@testing-library/jest-dom/dist/matchers';\nimport { color } from 'd3';\n\nclass Choropleth extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      property: this.props.currentFeature + this.props.currentYear,\n      showState: true,\n      x: 0,\n      y: 0,\n      zoomScale: 1,\n      map: 'CHOROPLETH'\n    }\n\n    // geojson data\n    this.stateGeojson = [];\n    this.countyGeojson = [];\n\n    this.canvasRef = React.createRef();\n    this.ZOOM_SCALE_THRESHOLD = 2;\n\n    // map id\n    this.STATE_MAP_ID = 'g-state';\n    this.COUNTY_MAP_ID = 'g-county';\n\n    // number of colors for the color scale\n    this.STATE_COLORS = 7;\n    this.COUNTY_COLORS = 3;\n\n    this.zoom = Object;\n  }\n\n  toggleMapType = (value) => {\n    //event.preventDefault();\n    //console.log(value)\n    this.setState({map: value});\n  }\n\n  increaseZoomScale = () => {\n    this.zoomTransition(d3.select('#map'), 1.2);  \n  }\n\n  decreaseZoomScale = () => {\n    this.zoomTransition(d3.select('#map'), 0.8);\n  }\n\n  zoomTransition(svg, zoomLevel) {\n    svg.transition()\n      .delay(100)\n      .duration(700)\n      .call(this.zoom.scaleBy, zoomLevel);\n  }\n\n\n\n  drawMap() {\n    const {scrollWidth, scrollHeight} = this.canvasRef.current;\n\n    const projection = d3.geoAlbersUsa()\n      .scale(scrollWidth / 1.2)\n      .translate([scrollWidth / 2, scrollHeight / 2]);\n    \n    const path = d3.geoPath()\n      .projection(projection);\n\n    const featureExtrema = getExtrema(this.props.currentFeature, this.props.years, this.countyGeojson);\n    const stateColorScale = getColorScale(featureExtrema, this.STATE_COLORS);\n    const countyColorScale = getColorScale(featureExtrema, this.COUNTY_COLORS);\n\n    d3.selectAll('#' + this.STATE_MAP_ID).remove();\n    d3.selectAll('#' + this.COUNTY_MAP_ID).remove();\n    const svg = d3.select(this.canvasRef.current).select('#map');\n\n    this.drawStates(svg, stateColorScale, path);\n    this.drawCounties(svg, countyColorScale, path);\n    this.drawStateLegend(stateColorScale);\n    this.drawCountyLegend(countyColorScale);\n    console.log('show states', this.state.showState);\n    if (this.state.showState) {\n      hideMap('#' + this.COUNTY_MAP_ID);\n    }\n\n    // zoom function\n    const zoomed = event => {\n      const {transform} = event;\n      d3.select('#map').selectAll('g').attr('transform', transform);\n      d3.select('#map').selectAll('g').attr('stroke-width', 1 / transform.k);\n      this.setState({x: transform.x, y: transform.y, zoomScale: transform.k}, this.updateZoomedView(this.state.zoomScale));\n    };\n\n    this.zoom = d3.zoom()\n      .scaleExtent([1, 4])\n      .on(\"zoom\", zoomed);\n    \n    svg.call(this.zoom)\n      .transition()\n      .call(this.zoom.transform, d3.zoomIdentity.translate(this.state.x,this.state.y).scale(this.state.zoomScale));\n\n\n  }\n\n  drawStateLegend(colorScale) {\n    const legend = d3legend.legendColor()\n      .shapeWidth(30)\n      .orient('vertical')\n      .scale(colorScale);\n    d3.select('#legend').append('g').attr('id', this.STATE_MAP_ID).call(legend);\n  }\n\n  drawCountyLegend(colorScale) {\n    const legend = d3legend.legendColor()\n      .shapeWidth(30)\n      .orient('vertical')\n      .scale(colorScale);\n    d3.select('#legend').append('g').attr('id', this.COUNTY_MAP_ID).call(legend);\n  }\n\n  drawStates(svg, colorScale, path) {\n    \n    svg.append('g')\n      .attr('id', this.STATE_MAP_ID)\n      .selectAll('path')\n      .data(this.stateGeojson)\n      .enter()\n      .append('path')\n      .attr('d', path)\n      .attr('fill', d => colorScale(d.properties[this.state.property]))\n      .style('stroke', '#000')\n      .on('click', (event, d) => this.props.onSelectRegion(d.properties.STATE_NAME, ''))\n      .on('mouseover', (event, d) => {\n        this.props.tooltip\n          .style('visibility', 'visible');\n        this.props.tooltip.html(getTooltipText(d.properties.STATE_NAME,\n            this.props.currentFeature, d.properties[this.state.property],\n            this.props.currentYear))\n          .style('left', (event.pageX + 10) + 'px')\n          .style('top', (event.pageY + 10) + 'px');\n      })\n      .on('mouseout', (event, d) => {\n        this.props.tooltip.style('visibility', 'hidden')\n      });\n  }\n\n  drawCounties(svg, colorScale, path) {\n    svg.append('g')\n      .attr('id', this.COUNTY_MAP_ID)\n      .selectAll('path')\n      .data(this.countyGeojson)\n      .enter()\n      .append('path')\n      .attr('d', path)\n      .attr('fill', d => colorScale(d.properties[this.state.property]))\n      .style('stroke', '#000')\n      .on('click', (event, d) => this.props.onSelectRegion(d.properties.STATE_NAME, d.properties.NAME))\n      .on('mouseover', (event, d) => {\n        this.props.tooltip\n          .style('visibility', 'visible');\n        this.props.tooltip.html(getTooltipText(d.properties.NAME + ' ' + d.properties.STATE_NAME,\n            this.props.currentFeature,\n            d.properties[this.state.property],\n            this.props.currentYear))\n          .style('left', (event.pageX + 10) + 'px')\n          .style('top', (event.pageY + 10) + 'px');\n      })\n      .on('mouseout', (event, d) => {\n        this.props.tooltip.style('visibility', 'hidden')\n      });\n\n   \n  }\n\n  /**\n   * Toogle the visibility of #map-county based on zoom scale\n   * \n   * @param {number} zoomScale The scale factor\n   */\n  updateZoomedView(zoomScale) {\n    if (zoomScale > this.ZOOM_SCALE_THRESHOLD && this.state.showState === true) {\n      // change to county view\n      this.setState({showState: false}, () => {\n        showMap('#' + this.COUNTY_MAP_ID);\n        hideStateLegend(d3.select('#legend').select('#' + this.STATE_MAP_ID));\n      });\n    } else if (zoomScale <= this.ZOOM_SCALE_THRESHOLD && this.state.showState === false) {\n      // change to state view\n      this.setState({showState: true}, () => {\n        hideMap('#' + this.COUNTY_MAP_ID);\n        showStateLegend(d3.select('#legend').select('#' + this.STATE_MAP_ID))\n      });\n    }\n  }\n\n  componentDidMount() {\n    \n    Promise.all([d3.json(this.props.stateGeojson), d3.json(this.props.countyGeojson)]).then(data => {\n      this.stateGeojson = data[0].features;\n      this.countyGeojson = data[1].features;\n      this.drawMap();\n    }).catch(err => console.log(\"error\", err));\n  \n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    console.log(this.state.map)\n    const property = this.props.currentFeature + this.props.currentYear;\n    if (prevState.property !== property) {\n      this.setState({property: property});\n      this.drawMap();\n    }\n  }\n\n  render() {\n    return (\n      <div style={{height: '100%'}}>\n        <Row gutter={[16, 16]} style={{height: '100%'}}>\n          <Col span={4}>\n            <Segmented options={['CHOROPLETH', 'HEXBIN']} value={this.state.map} onChange={this.toggleMapType} />\n            <div>\n              <svg id='legend'><g></g></svg>\n            </div>\n            <div>\n              <Button onClick={this.increaseZoomScale}>+</Button>\n              <Button onClick={this.decreaseZoomScale}>-</Button>\n            </div>\n          </Col>\n          <Col span={20}>\n          <div style={{height: '100%', width: '100%'}} ref={this.canvasRef}>\n            <svg id='map' style={{width: '100%', height: '100%'}}><g id='root'></g></svg>\n          </div>\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default Choropleth;","import React from 'react';\nimport * as d3 from 'd3';\nimport { Spin } from 'antd';\nimport { getStateData, getYScales } from './helper';\n\nclass ParallelCoordinates extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.canvasRef = React.createRef();\n  }\n\n  drawParallelCoordinates(data) {\n\n    const {scrollWidth, scrollHeight} = this.canvasRef.current;\n    const margin = {top: 50, right: 50, bottom: 50, left: 50};\n    const width = scrollWidth - margin.left - margin.right;\n    const height = scrollHeight - margin.top - margin.bottom;\n\n\n    const svg = d3.select(this.canvasRef.current).select('svg')\n      .attr('width', width)\n      .attr('height', height)\n\n    const rootGroup = svg.select('g#root');\n\n    rootGroup.append('g')\n      .attr('transform', `translate(${margin.left}, ${margin.top})`)\n\n    const features = Object.keys(data[0]).filter(key => key.slice(-2) == this.props.currentYear);\n\n    const yScales = getYScales(data, features, margin.top + height, margin.top);\n    const xScale = d3.scalePoint()\n      .range([margin.left, width])\n      .domain(features);\n\n    const path = d => {\n      return d3.line()(features.map(feature => {\n        const yScale = yScales[feature];\n        return [xScale(feature), yScale(d[feature])];\n      }));\n    }\n\n    rootGroup.selectAll('path')\n      .data(data)\n      .join('path')\n      .attr('d', path)\n      .style('fill', 'none')\n      .style('stroke', '#69b3a2')\n      //.opacity(0.5);\n    \n    \n    rootGroup.selectAll(\"myAxis\")\n      .data(features).enter()\n      .append(\"g\")\n      .attr('id', 'axis-test')\n      .attr('transform', d => `translate(${xScale(d)})`)\n      .each(function(d) { d3.select(this).call(d3.axisLeft().ticks(5).scale(yScales[d])); })\n      .append(\"text\")\n      .style(\"text-anchor\", \"middle\")\n      .attr(\"y\", 10)\n      .text(function(d) { \n        return d; })\n      .style(\"fill\", \"black\")\n      .attr('id', 'label-test')\n      \n  \n  }\n\n  componentDidMount() {\n    \n  }\n\n  componentDidUpdate() { \n    \n  }\n\n\n  render() {\n    if (this.props.stateCSV.length > 0) {\n      this.drawParallelCoordinates(this.props.stateCSV);\n    }\n    return (\n      <div style={{height: '100%'}} ref={this.canvasRef}>\n        <svg style={{width: '100%', height: '100%'}}>\n          <g id='root'></g>\n        </svg>\n      </div>\n    )\n  }\n}\n\n\nexport default ParallelCoordinates;","import * as d3 from 'd3';\n\n/**\n * \n * @param {*} data \n * @param {*} features \n * @param {*} bottom \n * @param {*} top \n * @returns \n */\nexport function getYScales(data, features, bottom, top) {\n  \n  const scales = {};\n\n  features.forEach(feature => {\n    //console.log(data.map(d => d[feature]));\n    scales[feature] = d3.scaleLinear()\n      .domain(d3.extent(data, item => Number(item[feature])))\n      .range([bottom, top]);\n  });\n\n  return scales;\n}\n\nexport function getStateData(data, year) {\n  \n}","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { Layout, Row, Col, Card } from 'antd';\nimport * as d3 from 'd3';\nimport natCounties from './assets/NAT_counties.csv';\nimport natStates from './assets/NAT_states.csv';\nimport Feature from './feature/Feature';\nimport Time from './time/Time';\nimport Choropleth from './map/Choropleth';\nimport natGeojson from './assets/NAT.geojson';\nimport statesGeojson from './assets/US_states.geojson';\nimport ParallelCoordinates from './parallel-coordinates/ParallelCoordinates';\nimport { createTooltip } from './tooltip';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      countyDataset: [],\n      stateDataset: [],\n      feature: 'HR',\n      year: 60,\n      state: '',\n      county: ''\n    };\n\n    this.features = [\n      {key: 'HR', feature: 'Homicide rate'},\n      {key: 'UE', feature: 'Unemployment rate'},\n      {key: 'DV', feature: 'Divorce rate'},\n      {key: 'MA', feature: 'Median age'},\n      {key: 'DNL', feature: 'Population density'},\n      {key: 'MFIL', feature: 'Median family income'},\n      {key: 'FP', feature: 'Percentage of families below poverty'},\n      {key: 'BLK', feature: 'Percentage of black population'},\n      {key: 'GI', feature: 'Gini index'},\n      {key: 'FH', feature: 'Percentage of female headed households'}\n    ];\n    this.years = [60, 70, 80, 90];\n\n    this.selectFeature = this.selectFeature.bind(this);\n    //this.selectTime = this.selectTime.bind(this);\n    this.selectRegion = this.selectRegion.bind(this);\n\n    this.tooltip = createTooltip();\n  }\n\n  selectFeature(e) {\n    e.preventDefault();\n    this.setState({feature: e.currentTarget.accessKey});\n  }\n\n  selectTime = (year) => {\n    this.setState({year: year});\n  };\n\n  selectRegion(state, county) {\n    this.setState({state: state, county: county})\n  }\n\n  componentDidMount() {\n  }\n\n  fetchData() {\n    Promise.all([d3.csv(natCounties), d3.csv(natStates)]).then(data => {\n      this.setState({countyDataset: data[0], stateDataset: data[1]});\n    });\n  }\n\n  componentDidUpdate() {\n    //console.log(this.state)\n  }\n\n  render() {\n    if (this.state.countyDataset.length === 0 || this.state.stateDataset.length === 0) {\n      this.fetchData();\n    }\n    const firstRowHeight = 700;\n    const secondRowHeight = 500;\n    //console.log(this.state)\n    return (\n      /*<div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>\n      </div>*/\n      \n      <div className=\"App\">\n        <Layout className=\"layout\">\n          <Row gutter={[16, 16]}>\n            <Col span={4} >\n              <Card style={{height: firstRowHeight}}>\n                <Feature\n                  featureList={this.features}\n                  currentFeature={this.state.feature}\n                  onSelectFeature={this.selectFeature}\n                />\n              </Card>\n            </Col>\n            <Col span={14} >\n              <Card style={{height: firstRowHeight}}>\n                <Time\n                  timeline={this.years}\n                  onSelectTime={this.selectTime}\n                />\n                <Choropleth\n                  stateGeojson={statesGeojson}\n                  stateDataset={this.state.stateDataset}\n                  countyGeojson={natGeojson}\n                  currentFeature={this.state.feature}\n                  currentYear={this.state.year}\n                  years={this.years}\n                  onSelectRegion={this.selectRegion}\n                  tooltip={this.tooltip}\n                />\n              </Card>\n            </Col>\n            <Col span={6} >\n              <Card style={{height: firstRowHeight}}></Card>\n            </Col>\n            <Col span={16} >\n              <Card style={{height: secondRowHeight}}>\n                <ParallelCoordinates\n                  featureList={this.features}\n                  stateCSV={this.state.stateDataset}\n                  currentYear={this.state.year}\n                />\n              </Card>\n            </Col>\n            <Col span={8} >\n              <Card style={{height: secondRowHeight}}>adfdf</Card>\n            </Col>\n          </Row>\n        </Layout>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import * as d3 from 'd3';\n\nexport function createTooltip() {\n  return d3.select('body')\n    .append('div')\n    .style('position', 'absolute')\n    .style('visibility', 0);\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  /*<React.StrictMode>\n    <App />\n  </React.StrictMode>*/\n  <App />\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}